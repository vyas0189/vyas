name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: "22"

jobs:
  build-and-test:
    name: Build and Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  deploy:
    name: Deploy to Netlify
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      deploy_url: ${{ steps.netlify-deploy.outputs.deploy_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        id: netlify-deploy
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          prod_flag=""
          if [ "$BRANCH_NAME" = "main" ]; then prod_flag="--prod"; fi

          netlify deploy \
            --dir dist \
            --site ${{ secrets.NETLIFY_SITE_ID }} \
            --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} \
            $prod_flag \
            --json \
            > deploy_output.json

          cat deploy_output.json

          # Extract deploy URL
          DEPLOY_URL=$(cat deploy_output.json | jq -r '.deploy_url // .url')
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOY_URL"

  e2e-tests:
    name: E2E Tests
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy.outputs.deploy_url }}

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  comment-pr:
    name: Comment on PR
    if: github.event_name == 'pull_request' && always()
    needs: [deploy, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v8
        with:
          script: |
            const deployUrl = '${{ needs.deploy.outputs.deploy_url }}';
            const e2eStatus = '${{ needs.e2e-tests.result }}';
            const testStatus = e2eStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
            const overallStatus = e2eStatus === 'success' ? '‚úÖ All checks passed!' : '‚ùå E2E tests failed - deployment blocked';

            const comment = `### üöÄ Preview Deployment

            **Preview URL:** ${deployUrl}

            **E2E Test Results:** ${testStatus}

            **Status:** ${overallStatus}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
