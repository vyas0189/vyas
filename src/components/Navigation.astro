---
const links = [
	{ href: '/', label: 'Home' },
	{ href: '/about', label: 'About' },
	{ href: '/contact', label: 'Contact' },
];

const currentPath = Astro.url.pathname;
---

<header
	class='sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur-sm supports-backdrop-filter:bg-background/60'>
	<div class='container flex h-16 items-center px-4'>
		<nav class='flex flex-1 items-center space-x-6 text-sm font-medium'>
			{
				links.map((link) => (
					<a
						href={link.href}
						class:list={[
							'transition-all duration-200 hover:text-foreground hover:scale-105',
							currentPath === link.href
								? 'text-foreground font-semibold'
								: 'text-foreground/60',
						]}>
						{link.label}
					</a>
				))
			}
		</nav>
		<div class='flex items-center space-x-2'>
			<div class='theme-toggle-wrapper'>
				<button
					id='theme-toggle'
					class='inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 w-10'
					aria-label='Toggle theme'>
					<svg
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='sun-icon h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0'>
						<circle cx='12' cy='12' r='4'></circle>
						<path d='M12 2v2'></path>
						<path d='M12 20v2'></path>
						<path d='m4.93 4.93 1.41 1.41'></path>
						<path d='m17.66 17.66 1.41 1.41'></path>
						<path d='M2 12h2'></path>
						<path d='M20 12h2'></path>
						<path d='m6.34 17.66-1.41 1.41'></path>
						<path d='m19.07 4.93-1.41 1.41'></path>
					</svg>
					<svg
						xmlns='http://www.w3.org/2000/svg'
						width='24'
						height='24'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						class='moon-icon absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100'>
						<path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path>
					</svg>
				</button>
				<div id='theme-dropdown' class='theme-dropdown'>
					<button data-theme='light' class='theme-option'>Light</button>
					<button data-theme='dark' class='theme-option'>Dark</button>
					<button data-theme='system' class='theme-option'>System</button>
				</div>
			</div>
		</div>
	</div>
</header>

<style>
	.theme-toggle-wrapper {
		position: relative;
	}

	.theme-dropdown {
		position: absolute;
		top: calc(100% + 4px);
		right: 0;
		z-index: 9999;
		min-width: 8rem;
		overflow: hidden;
		rounded: 0.375rem;
		border: 1px solid hsl(var(--border));
		background-color: hsl(var(--popover));
		color: hsl(var(--popover-foreground));
		box-shadow:
			0 10px 15px -3px rgb(0 0 0 / 0.1),
			0 4px 6px -4px rgb(0 0 0 / 0.1);
		display: none;
		opacity: 0;
		transform: scale(0.95);
		transition:
			opacity 150ms,
			transform 150ms;
		border-radius: 0.375rem;
		padding: 0.25rem;
	}

	.theme-dropdown.open {
		display: block;
		opacity: 1;
		transform: scale(1);
	}

	.theme-option {
		position: relative;
		display: flex;
		cursor: default;
		user-select: none;
		align-items: center;
		border-radius: 0.125rem;
		padding: 0.375rem 0.5rem;
		font-size: 0.875rem;
		outline: none;
		transition:
			background-color 150ms,
			color 150ms;
		width: 100%;
		text-align: left;
		background: transparent;
		border: none;
		color: inherit;
	}

	.theme-option:hover,
	.theme-option:focus {
		background-color: hsl(var(--accent));
		color: hsl(var(--accent-foreground));
	}
</style>

<script>
	// Theme management
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches
			? 'dark'
			: 'light';
	};

	const setTheme = (theme: string) => {
		const isDark =
			theme === 'dark' ||
			(theme === 'system' &&
				window.matchMedia('(prefers-color-scheme: dark)').matches);
		document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', theme);
		}
	};

	// Initialize theme
	const currentTheme = getThemePreference();
	setTheme(currentTheme || 'light');

	// Dropdown toggle
	const toggleButton = document.getElementById('theme-toggle');
	const dropdown = document.getElementById('theme-dropdown');

	let isOpen = false;

	const openDropdown = () => {
		if (dropdown) {
			dropdown.classList.add('open');
			isOpen = true;
		}
	};

	const closeDropdown = () => {
		if (dropdown) {
			dropdown.classList.remove('open');
			isOpen = false;
		}
	};

	toggleButton?.addEventListener('click', (e) => {
		e.stopPropagation();
		if (isOpen) {
			closeDropdown();
		} else {
			openDropdown();
		}
	});

	// Close dropdown when clicking outside
	document.addEventListener('click', (e) => {
		if (
			isOpen &&
			!dropdown?.contains(e.target as Node) &&
			!toggleButton?.contains(e.target as Node)
		) {
			closeDropdown();
		}
	});

	// Handle theme selection
	const themeOptions = document.querySelectorAll('.theme-option');
	themeOptions.forEach((option) => {
		option.addEventListener('click', (e) => {
			const theme = (e.target as HTMLElement).getAttribute('data-theme');
			if (theme) {
				setTheme(theme);
				closeDropdown();
			}
		});
	});
</script>
